name: Maven Pipeline

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**/README.md'
env:
  app_version: "2.0.0"
  edge-service_version : "1.0.0"
  config-server_version : "1.0.0"

jobs:
  checkout:
    name: Checkout
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v2
      - run: |
          mkdir app && cp -R ci app && cp -R edge-service app && cp -R todo-app app && cp -R config-server app && cp -R .git app
      - uses: actions/upload-artifact@v2
        with:
          name: Checkout
          path: app

  build-config-server:
    name: Build Config Server
    runs-on: ubuntu-latest
    needs: [checkout]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Checkout
          path: app
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      # Step that does that actual cache save and restore
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        working-directory: app/config-server
        run: mvn -B package
      - run: |
          mkdir -p artifact/config/maven && cp app/config-server/target/config-server-${{env.config-server_version}}.jar artifact/config/maven && cp app/config-server/Dockerfile artifact/config
      - uses: actions/upload-artifact@v2
        with:
          name: Package
          path: artifact       


  build-todo-app:
    name: Build Todo App
    runs-on: ubuntu-latest
    needs: [checkout]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Checkout
          path: app
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      # Step that does that actual cache save and restore
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        working-directory: app/todo-app
        run: mvn -B package
      - run: |
          mkdir -p artifact/todo/maven && cp app/todo-app/target/todo-${{env.app_version}}.jar artifact/todo/maven && cp app/todo-app/Dockerfile artifact/todo
      - uses: actions/upload-artifact@v2
        with:
          name: Package
          path: artifact

  build-edge-service:
    name: Build Edge Service
    runs-on: ubuntu-latest
    needs: [ checkout ]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Checkout
          path: app
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      # Step that does that actual cache save and restore
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        working-directory: app/edge-service
        run: mvn -B package
      - run: |
          mkdir -p artifact/edge-service/maven && cp app/edge-service/target/edge-service-${{env.edge-service_version}}.jar artifact/edge-service/maven && cp app/edge-service/Dockerfile artifact/edge-service && cp app/ci/docker-compose.yaml artifact/edge-service
      - uses: actions/upload-artifact@v2
        with:
          name: Package
          path: artifact

  package-config-server-docker:
    name: Package Config Server
    runs-on: ubuntu-latest
    needs: [build-config-server]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Package
          path: artifact
      - name: Build local image
        working-directory: artifact/config
        run: |
          docker build --build-arg JAR_FILE=maven/config-server-${{env.config-server_version}}.jar --tag config-server:${{env.config-server_version}} .
          mkdir -p docker
          docker save config-server:${{env.config-server_version}} > docker/image.tar
      - uses: actions/upload-artifact@v2
        with:
          name: config-server-docker-artifact
          path: artifact/config/docker    

  package-todo-app-docker:
    name: Package todo-app
    runs-on: ubuntu-latest
    needs: [build-todo-app]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Package
          path: artifact
      - name: Build local image
        working-directory: artifact/todo
        run: |
          docker build --build-arg JAR_FILE=maven/todo-${{env.app_version}}.jar --tag todo:${{env.app_version}} .
          mkdir -p docker
          docker save todo:${{env.app_version}} > docker/image.tar
      - uses: actions/upload-artifact@v2
        with:
          name: todo-docker-artifact
          path: artifact/todo/docker    

  package-edge-service-docker:
    name: Package edge-service
    runs-on: ubuntu-latest
    needs: [ build-edge-service ]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Package
          path: artifact
      - name: Build local image
        working-directory: artifact
        run: |
          docker build --build-arg JAR_FILE=edge-service/maven/edge-service-${{env.edge-service_version}}.jar --tag edge-service:${{env.edge-service_version}} -f edge-service/Dockerfile .
          mkdir -p edge-service/docker
          docker save edge-service:${{env.edge-service_version}} > edge-service/docker/image.tar
          cp edge-service/docker-compose.yaml docker
      - uses: actions/upload-artifact@v2
        with:
          name: edge-service-docker-artifact
          path: artifact/edge-service    

  build-local-stack:
    name: Test stack
    runs-on: ubuntu-latest
    needs: [ package-todo-app-docker , package-edge-service-docker, package-config-server-docker ]
    steps:
      - name: Download Config Server Docker Image
        uses: actions/download-artifact@v2
        with:
          name: config-server-docker-artifact
          path: artifact/config-server/docker
      - name: Download Todo Docker Image
        uses: actions/download-artifact@v2
        with:
          name: todo-docker-artifact
          path: artifact/todo/docker
      - name: Download Edge Service Docker Image
        uses: actions/download-artifact@v2
        with:
          name: edge-service-docker-artifact
          path: artifact/edge-service
      - name: Build local stack
        working-directory: artifact
        run: |
          docker load < config-server/docker/image.tar
          docker load < todo/docker/image.tar
          docker load < edge-service/docker/image.tar
          docker-compose -f edge-service/docker-compose.yaml up -d
      - name: Test local stack
        timeout-minutes: 5
        run: |
          sleep 120
          docker run --network container:todo appropriate/curl -s --retry 10 --retry-connrefused http://localhost:8082/actuator/health
          docker run --network container:edge appropriate/curl -s --retry 10 --retry-connrefused http://localhost:8081/actuator/health
          docker run --network container:config-server appropriate/curl -s --retry 10 --retry-connrefused http://localhost:8080/actuator/health
      - name: Failure Result
        if: ${{ failure() }}
        run: |
          docker ps
          docker logs mongodb
          docker logs todo
          docker logs edge
          docker logs config-server

  
  push-docker-image-to-github-registry:
    name: Push to Github package registry
    runs-on: ubuntu-latest
    needs: [ package-todo-app-docker , package-edge-service-docker, package-config-server-docker, build-local-stack ]       
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') && contains(fromJson('["refs/heads/master", "refs/heads/main"]'), github.ref) }}
    steps:
      - name: Download Config Server Docker Image
        uses: actions/download-artifact@v2
        with:
          name: config-server-docker-artifact
          path: artifact/config-server/docker
      - name: Download Todo Docker Image
        uses: actions/download-artifact@v2
        with:
          name: todo-docker-artifact
          path: artifact/todo/docker
      - name: Download Edge Service Docker Image
        uses: actions/download-artifact@v2
        with:
          name: edge-service-docker-artifact
          path: artifact/edge-service
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.PACKAGE_USERNAME }}
          password: ${{ secrets.PACKAGE_RWD }}
      - name: Docker image push
        run: |
          docker tag todo:${{env.app_version}} ghcr.io/raghav2211/spring-web-flux-todo-app/maven/todo:${{env.app_version}}
          docker push ghcr.io/raghav2211/spring-web-flux-todo-app/maven/todo:${{env.app_version}}      

          docker tag edge-service:${{env.edge-service_version}} ghcr.io/raghav2211/spring-web-flux-todo-app/maven/edge-service:${{env.edge-service_version}}
          docker push ghcr.io/raghav2211/spring-web-flux-todo-app/maven/edge-service:${{env.edge-service_version}}      

          docker tag config-server:${{env.config-server_version}} ghcr.io/raghav2211/spring-web-flux-todo-app/maven/config-server:${{env.config-server_version}}
          docker push ghcr.io/raghav2211/spring-web-flux-todo-app/maven/config-server:${{env.config-server_version}}           
