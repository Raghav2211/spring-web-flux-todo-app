name: Pipeline

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**/README.md'
env:
  app_version: "2.0.0"
  edge-service_version : "1.0.0"

jobs:
  checkout:
    name: Checkout
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v2
      - run: |
          ls
          mkdir app && cp -R ci app && cp -R edge-service app && cp -R todo-app app && cp -R .git app
      - uses: actions/upload-artifact@v2
        with:
          name: Checkout
          path: app

  # Build Todo App

  build-todo-app-maven:
    name: Build app in maven
    runs-on: ubuntu-latest
    needs: [checkout]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Checkout
          path: app
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      # Step that does that actual cache save and restore
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        working-directory: app/todo-app
        run: mvn -B package
      - run: |
          ls
          mkdir -p artifact/todo/maven && cp app/todo-app/target/todo-${{env.app_version}}.jar artifact/todo/maven && cp app/todo-app/Dockerfile artifact/todo
      - uses: actions/upload-artifact@v2
        with:
          name: Package
          path: artifact
  build-todo-app-gradle:
    name: Build App in gradle
    runs-on: ubuntu-latest
    needs: [checkout]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Checkout
          path: app
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Grant execute permission for gradlew
        working-directory: app/todo-app
        run: chmod +x gradlew
      - name: Build with Gradle
        working-directory: app/todo-app
        run: ./gradlew build
      - run: |
          ls
          mkdir -p artifact/todo/gradle && cp app/todo-app/build/libs/todo-${{env.app_version}}.jar artifact/todo/gradle && cp app/todo-app/Dockerfile artifact/todo
      - uses: actions/upload-artifact@v2
        with:
          name: Package
          path: artifact

# Build Edge service
  build-edge-service-maven:
    name: Build Edge Service in maven
    runs-on: ubuntu-latest
    needs: [ checkout ]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Checkout
          path: app
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      # Step that does that actual cache save and restore
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        working-directory: app/edge-service
        run: mvn -B package
      - run: |
          ls
          mkdir -p artifact/edge-service/maven && cp app/edge-service/target/edge-service-${{env.edge-service_version}}.jar artifact/edge-service/maven && cp app/edge-service/Dockerfile artifact/edge-service
      - uses: actions/upload-artifact@v2
        with:
          name: Package
          path: artifact

  build-edge-service-gradle:
    name: Build Edge Service in gradle
    runs-on: ubuntu-latest
    needs: [ checkout ]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Checkout
          path: app
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Grant execute permission for gradlew
        working-directory: app/edge-service
        run: chmod +x gradlew
      - name: Build with Gradle
        working-directory: app/edge-service
        run: ./gradlew build
      - run: |
          mkdir -p artifact/edge-service/gradle && cp app/edge-service/build/libs/edge-service-${{env.edge-service_version}}.jar artifact/edge-service/gradle && cp app/edge-service/Dockerfile artifact/edge-service
      - uses: actions/upload-artifact@v2
        with:
          name: Package
          path: artifact

# Package Todo app
  package-todo-app-docker-maven:
    name: Package todo-app
    runs-on: ubuntu-latest
    needs: [build-todo-app-maven]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Package
          path: artifact
      - name: Build local image
        working-directory: artifact/todo
        run: |
          docker build --build-arg JAR_FILE=maven/todo-${{env.app_version}}.jar --tag todo:${{env.app_version}} .

  package-todo-app-docker-gradle:
    name: Package todo-app
    runs-on: ubuntu-latest
    needs: [build-todo-app-gradle]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Package
          path: artifact
      - name: Build local image
        working-directory: artifact/todo
        run: |
          docker build --build-arg JAR_FILE=gradle/todo-${{env.app_version}}.jar --tag todo:${{env.app_version}} .
          mkdir -p docker
          docker save todo:${{env.app_version}} > docker/image.tar
          echo "todo:${{env.app_version}}" > docker/tag
      - uses: actions/upload-artifact@v2
        with:
          name: todo-docker-artifact
          path: artifact/todo/docker

# Package Edge service
  package-edge-service-docker-maven:
    name: Package edge-service
    runs-on: ubuntu-latest
    needs: [ build-edge-service-maven ]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Package
          path: artifact
      - name: Build local image
        working-directory: artifact/edge-service
        run: |
          docker build --build-arg JAR_FILE=maven/edge-service-${{env.edge-service_version}}.jar --tag edge-service:${{env.edge-service_version}} .

  package-edge-service-docker-gradle:
    name: Package edge-service
    runs-on: ubuntu-latest
    needs: [ build-edge-service-gradle ]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: Package
          path: artifact
      - name: Build local image
        working-directory: artifact/edge-service
        run: |
          docker build --build-arg JAR_FILE=gradle/edge-service-${{env.edge-service_version}}.jar --tag edge-service:${{env.edge-service_version}} .
          mkdir -p docker
          docker save edge-service:${{env.edge-service_version}} > docker/image.tar
          echo "edge-service:${{env.edge-service_version}}" > docker/tag
      - uses: actions/upload-artifact@v2
        with:
          name: edge-service-docker-artifact
          path: artifact/edge-service/docker

  build-local-stack:
    name: Test stack
    runs-on: ubuntu-latest
    needs: [ package-todo-app-docker-gradle , package-edge-service-docker-gradle ]
    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v2
        with:
          name: todo-docker-artifact
          path: artifact/todo/docker
      - name: Build local stack
        working-directory: artifact/todo/docker
        run: |
          docker load < image.tar
          docker-compose -f ci/docker-compose.yaml up -d
      - name: Test local stack
        run: |
          sleep 120
          docker run --network container:todo appropriate/curl -s --retry 10 --retry-connrefused http://localhost:8080/actuator/health
      - name: Failure Result
        if: ${{ failure() }}
        run: |
          docker logs mongodb
          docker logs todo